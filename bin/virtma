#!/usr/bin/env ruby
require 'curses'
require 'virtma'
require 'optparse'
require 'json'

unless Process.uid == 0
  puts 'You need to be root'
  puts '(Psssst! Try using sudo)'
  exit
end

@options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: virtma [options]'
  opts.on('-c', '--config FILE', String, 'Link to config file') do |v|
    begin
      @options[:configuration] = Configuration.new.setup!(v)
    rescue Errno::ENOENT
      raise 'Config file not found'
    rescue => e
      raise 'No command in configuration-file'
    end
  end
  opts.on('-d', '--debug', 'Run with debug-mode enabled') do |v|
    @options[:debug] = v
  end
  opts.on('-f', '--fps', 'Show FPS overlay') do |v|
    @options[:fps_overlay] = v
  end
end.parse!

@options.freeze

if @options[:configuration].nil?
  puts 'No configuration supplied'
  puts 'Run command again with -c or --config'
  exit
end

begin
  Curses.init_screen

  # Init colors
  if Curses.has_colors?
    Curses.start_color
    Curses.use_default_colors
    (0..Curses.colors).each do |i|
      Curses.init_pair(i + 1, i, -1)
    end
  end

  Curses.nonl
  Curses.noecho # don't echo keys entered
  Curses.curs_set(0) # invisible cursor

  win = Curses::Window.new(Curses.lines, Curses.cols, 0, 0)
  win.keypad = true # Enable arrow-keys, and other "meta keys" in the Curses::Key-namespace

  win.nodelay = true
  win.timeout = 25

  window_manager = Virtma::WindowManager.new(@options, [
    Virtma::Screens::VmScreen.new,
    Virtma::Screens::UsbScreen.new,
    Virtma::Screens::RunScreen.new,
  ])
  window_manager.redraw(win)

  fps = Hash.new(0)

  while(true)
    if @options[:fps_overlay]
      last_second_fps = "%03d" % fps[(Time.now-1).to_s]

      win.setpos(0, win.maxx-4-3-2)
      win.addstr("FPS:#{last_second_fps}")
      fps[Time.now.to_s] += 1
    end

    current_window = window_manager.active_window
    case win.getch
    when Curses::Key::UP
      window_manager.active_window.up
    when Curses::Key::DOWN
      window_manager.active_window.down
    when Curses::Key::RIGHT
      window_manager.next_window
    when Curses::Key::LEFT
      window_manager.previous_window
    when ' ', Curses::Key::ENTER
      window_manager.active_window.toggle
    when Curses::Key::RESIZE
      window_manager.redraw(win)
    when 'p'
      if @options[:debug]
        require 'pry-remote';
        binding.remote_pry;
      end
    when 'q'
      break
      exit(0)
    end

    window_manager.redraw(win) if window_manager.active_window.changed? || window_manager.active_window != current_window
  end

  win.close
ensure
  Curses.close_screen
end


